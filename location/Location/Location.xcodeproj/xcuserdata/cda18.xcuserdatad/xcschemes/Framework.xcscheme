<?xml version="1.0" encoding="UTF-8"?>
<Scheme
   LastUpgradeVersion = "0500"
   version = "1.7">
   <BuildAction
      parallelizeBuildables = "YES"
      buildImplicitDependencies = "YES">
      <PostActions>
         <ExecutionAction
            ActionType = "Xcode.IDEStandardExecutionActionsCore.ExecutionActionType.ShellScriptAction">
            <ActionContent
               title = "Run Script"
               scriptText = "set -e&#10;set +u&#10;&#10;&#10;# Avoid recursively calling this script.&#10;if [[ $SF_MASTER_SCRIPT_RUNNING ]]&#10;then&#10;exit 0&#10;fi&#10;set -u&#10;export SF_MASTER_SCRIPT_RUNNING=1&#10;&#10;echo &quot;framework script start&quot; &gt;  &quot;${BUILT_PRODUCTS_DIR}/build.log&quot;&#10;echo &quot;---------------------------------&quot; &gt;&gt;  &quot;${BUILT_PRODUCTS_DIR}/build.log&quot;&#10;&#10;SF_TARGET_NAME=${PROJECT_NAME}&#10;SF_EXECUTABLE_PATH=&quot;lib${SF_TARGET_NAME}.a&quot;&#10;SF_WRAPPER_NAME=&quot;${SF_TARGET_NAME}.framework&quot;&#10;&#10;echo &quot;SF_TARGET_NAME=${SF_TARGET_NAME}&quot; &gt;&gt;  &quot;${BUILT_PRODUCTS_DIR}/build.log&quot;&#10;echo &quot;SF_EXECUTABLE_PATH=${SF_EXECUTABLE_PATH}&quot; &gt;&gt;  &quot;${BUILT_PRODUCTS_DIR}/build.log&quot;&#10;echo &quot;SF_WRAPPER_NAME=${SF_WRAPPER_NAME}&quot; &gt;&gt;  &quot;${BUILT_PRODUCTS_DIR}/build.log&quot;&#10;&#10;echo &quot;---------------------------------&quot; &gt;&gt;  &quot;${BUILT_PRODUCTS_DIR}/build.log&quot;&#10;&#10;# The following conditionals come from&#10;# https://github.com/kstenerud/iOS-Universal-Framework&#10;&#10;echo &quot;SDK_NAME=${SDK_NAME}&quot; &gt;&gt;  &quot;${BUILT_PRODUCTS_DIR}/build.log&quot;&#10;&#10;###############&#10;&#10;if [[ &quot;$SDK_NAME&quot; =~ ([A-Za-z]+) ]]&#10;then&#10;SF_SDK_PLATFORM=${BASH_REMATCH[1]}&#10;else&#10;echo &quot;ERROR: Could not find platform name from SDK_NAME: $SDK_NAME&quot; &gt;&gt; &quot;${BUILT_PRODUCTS_DIR}/build.log&quot;&#10;exit 1&#10;fi&#10;&#10;echo &quot;SF_SDK_PLATFORM=${SF_SDK_PLATFORM}&quot; &gt;&gt;  &quot;${BUILT_PRODUCTS_DIR}/build.log&quot;&#10;&#10;###############&#10;&#10;if [[ &quot;$SDK_NAME&quot; =~ ([0-9]+.*$) ]]&#10;then&#10;SF_SDK_VERSION=${BASH_REMATCH[1]}&#10;else&#10;echo &quot;ERROR: Could not find sdk version from SDK_NAME: $SDK_NAME&quot; &gt;&gt; &quot;${BUILT_PRODUCTS_DIR}/build.log&quot;&#10;exit 1&#10;fi&#10;&#10;echo &quot;SF_SDK_VERSION=${SF_SDK_VERSION}&quot; &gt;&gt;  &quot;${BUILT_PRODUCTS_DIR}/build.log&quot;&#10;&#10;&#10;###############&#10;&#10;if [[ &quot;$SF_SDK_PLATFORM&quot; = &quot;iphoneos&quot; ]]&#10;then&#10;SF_OTHER_PLATFORM=iphonesimulator&#10;else&#10;SF_OTHER_PLATFORM=iphoneos&#10;fi&#10;&#10;echo &quot;SF_OTHER_PLATFORM=${SF_OTHER_PLATFORM}&quot; &gt;&gt;  &quot;${BUILT_PRODUCTS_DIR}/build.log&quot;&#10;&#10;##############&#10;&#10;if [[ &quot;$BUILT_PRODUCTS_DIR&quot; =~ (.*)$SF_SDK_PLATFORM$ ]]&#10;then&#10;SF_OTHER_BUILT_PRODUCTS_DIR=&quot;${BASH_REMATCH[1]}${SF_OTHER_PLATFORM}&quot;&#10;else&#10;echo &quot;ERROR: Could not find platform name from build products directory: $BUILT_PRODUCTS_DIR&quot; &gt;&gt;  &quot;${BUILT_PRODUCTS_DIR}/build.log&quot;&#10;exit 1&#10;fi&#10;&#10;echo &quot;SF_OTHER_BUILT_PRODUCTS_DIR=${SF_OTHER_BUILT_PRODUCTS_DIR}&quot; &gt;&gt;  &quot;${BUILT_PRODUCTS_DIR}/build.log&quot;&#10;&#10;# Build the other platform.&#10;&#10;echo &quot;---------------------------------&quot; &gt;&gt;  &quot;${BUILT_PRODUCTS_DIR}/build.log&quot;&#10;&#10;&#10;#a bug here that using ${ACTION} actually get error so we will just use build action&#10;echo &quot;xcodebuild -project ${PROJECT_FILE_PATH} -target ${TARGET_NAME} -configuration ${CONFIGURATION} -sdk ${SF_OTHER_PLATFORM}${SF_SDK_VERSION} BUILD_DIR=${BUILD_DIR} OBJROOT=${OBJROOT} BUILD_ROOT=${BUILD_ROOT}  SYMROOT=${SYMROOT} build&quot; &gt;&gt; &quot;${BUILT_PRODUCTS_DIR}/build.log&quot;&#10;&#10;&#10;&#10;xcodebuild -project &quot;${PROJECT_FILE_PATH}&quot; -target &quot;${TARGET_NAME}&quot; -configuration &quot;${CONFIGURATION}&quot; -sdk ${SF_OTHER_PLATFORM}${SF_SDK_VERSION} BUILD_DIR=&quot;${BUILD_DIR}&quot; OBJROOT=&quot;${OBJROOT}&quot; BUILD_ROOT=&quot;${BUILD_ROOT}&quot; SYMROOT=&quot;${SYMROOT}&quot; build&#10;&#10;echo &quot;---------------------------------&quot; &gt;&gt;  &quot;${BUILT_PRODUCTS_DIR}/build.log&quot;&#10;&#10;&#10;echo &quot;lipo -create ${BUILT_PRODUCTS_DIR}/${SF_EXECUTABLE_PATH} ${SF_OTHER_BUILT_PRODUCTS_DIR}/${SF_EXECUTABLE_PATH} -output ${BUILT_PRODUCTS_DIR}/${SF_WRAPPER_NAME}/Versions/A/${SF_TARGET_NAME} &quot; &gt;&gt;  &quot;${BUILT_PRODUCTS_DIR}/build.log&quot;&#10;&#10;&#10;# Smash the two static libraries into one fat binary and store it in the .framework&#10;lipo -create &quot;${BUILT_PRODUCTS_DIR}/${SF_EXECUTABLE_PATH}&quot; &quot;${SF_OTHER_BUILT_PRODUCTS_DIR}/${SF_EXECUTABLE_PATH}&quot; -output &quot;${BUILT_PRODUCTS_DIR}/${SF_WRAPPER_NAME}/Versions/A/${SF_TARGET_NAME}&quot;&#10;&#10;echo &quot;---------------------------------&quot; &gt;&gt;  &quot;${BUILT_PRODUCTS_DIR}/build.log&quot;&#10;&#10;&#10;echo &quot;cp -a ${BUILT_PRODUCTS_DIR}/${SF_WRAPPER_NAME}/Versions/A/${SF_TARGET_NAME} ${SF_OTHER_BUILT_PRODUCTS_DIR}/${SF_WRAPPER_NAME}/Versions/A/${SF_TARGET_NAME} &quot; &gt;&gt;  &quot;${BUILT_PRODUCTS_DIR}/build.log&quot;&#10;&#10;# Copy the binary to the other architecture folder to have a complete framework in both.&#10;cp -a &quot;${BUILT_PRODUCTS_DIR}/${SF_WRAPPER_NAME}/Versions/A/${SF_TARGET_NAME}&quot; &quot;${SF_OTHER_BUILT_PRODUCTS_DIR}/${SF_WRAPPER_NAME}/Versions/A/${SF_TARGET_NAME}&quot;&#10;&#10;## to verify the fat library&#10;# lipo -info Location.framework/Versions/A/Location&#10;">
               <EnvironmentBuildable>
                  <BuildableReference
                     BuildableIdentifier = "primary"
                     BlueprintIdentifier = "3E22775E17D0579F00426B00"
                     BuildableName = "Framework"
                     BlueprintName = "Framework"
                     ReferencedContainer = "container:Location.xcodeproj">
                  </BuildableReference>
               </EnvironmentBuildable>
            </ActionContent>
         </ExecutionAction>
      </PostActions>
      <BuildActionEntries>
         <BuildActionEntry
            buildForTesting = "YES"
            buildForRunning = "YES"
            buildForProfiling = "YES"
            buildForArchiving = "YES"
            buildForAnalyzing = "YES">
            <BuildableReference
               BuildableIdentifier = "primary"
               BlueprintIdentifier = "3E22775E17D0579F00426B00"
               BuildableName = "Framework"
               BlueprintName = "Framework"
               ReferencedContainer = "container:Location.xcodeproj">
            </BuildableReference>
         </BuildActionEntry>
      </BuildActionEntries>
   </BuildAction>
   <TestAction
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
      shouldUseLaunchSchemeArgsEnv = "YES"
      buildConfiguration = "Debug">
      <Testables>
      </Testables>
   </TestAction>
   <LaunchAction
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
      launchStyle = "0"
      useCustomWorkingDirectory = "NO"
      buildConfiguration = "Debug"
      ignoresPersistentStateOnLaunch = "NO"
      debugDocumentVersioning = "YES"
      allowLocationSimulation = "YES">
      <AdditionalOptions>
      </AdditionalOptions>
   </LaunchAction>
   <ProfileAction
      shouldUseLaunchSchemeArgsEnv = "YES"
      savedToolIdentifier = ""
      useCustomWorkingDirectory = "NO"
      buildConfiguration = "Release"
      debugDocumentVersioning = "YES">
   </ProfileAction>
   <AnalyzeAction
      buildConfiguration = "Debug">
   </AnalyzeAction>
   <ArchiveAction
      buildConfiguration = "Release"
      revealArchiveInOrganizer = "YES">
   </ArchiveAction>
</Scheme>
